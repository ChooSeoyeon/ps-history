import java.util.*;
/*
[설명]
- k칸 점프 -> k만큼 건전지 사용함
- 현재까지온거리(현재좌표)*2로 순간이동 -> 건전지 사용 x -> 효율적
- 거리 N만큼 떨어진 곳으로 갈 때 건전지 사용량 최소화(점프 최소화)
- 가장 작은 건전지 사용량 return
[접근]
- 순간이동은 무조건 짝수칸으로 이동. 결과부터 보면
    - 짝수면, /2
    - 홀수면, -1
- 결과부터 본 이유 : 큰 수부터 두배하는 게 더 많이씩 이동할 수 있어서 남는 칸(한 칸씩 가야만 하는 칸)이 줄어듦.
    - 뒤에서부터 할 수만 있다면 /2를 먼저한다고 가정.
- 5-1/2/2-1=0 -> 2번
- 6/2-1/2-1=0 -> 2번
- 5000/2/2/2-1/2/2/2/2-1/2-1/2-1/2/2/2-1=0 -> 5번
*/

public class Solution {
    public int solution(int n) {
        int ans = 0;

        while(n!=0) {
            if(n%2==0) n/=2;
            else {
                n--;
                ans++;
            }
        }

        return ans;
    }
}