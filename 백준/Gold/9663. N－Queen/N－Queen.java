import java.util.*;

/*
[설명]
- N*N짜리 체스판에 퀸 N개를 서로 공격할 수 없게 놓기(NQueen 문제)
- 즉, 같은 행, 열, 대각선에는 다른 퀸을 놓을 수 없음
- 퀸을 놓을 수 있는 경우의 수 구하기
[접근]
- 백트래킹
- 과정
1. 같은 행에는 퀸을 놓지 않는다고 가정
	일차원 배열로 퀸들의 위치 표현함.
	예를 들어 N이 4라면, arr[5]에 퀸들의 위치 표현 가능 (하나의 행에는 하나의 퀸만 존재한다고 가정해서 1차원으로 표현 가능)
	arr[0]은 사용 안함
	체스판의 각 칸을 (1,1)~(4,4)로 명명
	예를 들어 arr={0,3,1,0,0}이라면 두 개의 퀸이 (1,3), (2,1)에 위치함을 의미
	배열의 i번째 원소(인덱스)는 퀸이 체스판의 i번째 행에 위치함을 의미함 (1~4번째 행) (체스판의 행을 0번째부터 세지 않은 이유는 열과 통일하기 위함)
	배열의 각 원소의 값은 퀸이 체스판의 어느 열에 위치하는지를 의미함 (1~4번째 열) (체스판의 열을 0번쨰부터 세지 않은 이유는 원소 값이 0일 땐 퀸이 없는 걸로 표현하기 위함)
2. 같은 열이나 같은 대각선에 놓이는지 확인
	1) 같은 열 체크는 단순히 arr[i] 값과 arr[j] 값이 같은지 확인하면 됨
		예를 들어 {0,2,2,0,0}이라면 퀸이 (1,2), (2,2)에 위치한 것으로 두 퀸이 같은 열에 놓인 것임
	2) 같은 대각선 체크는 열의 차이와 행의 차이가 같은지 확인
		|arr[i]-arr[j]|==i-k라면 대각선에 위치한 것임
		예를 들어 {0,2,1,0,0}에서 퀸의 위치인 (2,1)과 (1,2)의 행의 차이는 2-1=1이고, 열의 차이는 |1-2|=1이므로 두 값이 같아 대각선에 위치한 것임을 알 수 있음
*/
public class Main {
    public static int n; // 퀸의 개수
    public static int[] arr = new int[100]; // 퀸의 위치 표현한 1차원 배열. 퀸을 하나도 놓지 않은 상태인 0으로 초기화함. 인덱스는 행. 값은 열.
    public static int cnt = 0; // 경우의 수
    public static int c =0;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        nqueen(0);
        System.out.print(cnt);
    }

    // 같은 열이나 같은 대각선에 놓이면 false, 안놓이면 true 반환
    public static boolean check(int x) { // x는 현재 퀸을 놓고 싶은 행(인덱스)
        for(int i=1; i<x; i++) { // 이전 행들을 체크
            // 이전 행에서 퀸의 위치(열)가 새로 놓고자 하는 행에서 퀸의 위치(열)과 같음 혹은 대각선임
            if(arr[i]==arr[x] || Math.abs(arr[x]-arr[i])==x-i) {
                return false;
            }
        }
        return true;
    }
    public static void nqueen(int x) {
        c++;
        if(check(x)) { // 1행은 일단 무조건 true라 먼저 놓고, 나머지 행들은 일단 넣고 체크함.
            if(x==n) { // 방금 넣어서 체크 통과한 애가 마지막 애였던 거임.
                cnt++;
            }
            else { // x는 행, i는 열
                for(int i=1; i<=n; i++) { // (1,1~5) (2,1~5)
                    arr[x+1]=i;
                    nqueen(x+1); // (1)
                }
            }
        }
    }
}